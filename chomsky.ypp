%{
#include <cstdio>
#include <iostream>
using namespace std;

// stuff from flex that bison needs to know about:
extern int yylex();
extern int yyparse();

// buffer state. This is used to parse string in memory
// decomment when https://github.com/westes/flex/issues/383
typedef struct yy_buffer_state * YY_BUFFER_STATE;
extern YY_BUFFER_STATE yy_scan_string(const char * str); // it does not work.
extern void yy_delete_buffer(YY_BUFFER_STATE buffer);
extern void yy_switch_to_buffer(YY_BUFFER_STATE buffer);

// pointer to a file. This is used to parse files.
extern FILE *yyin;
 
void yyerror(const char *s);
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
	int ival;
	float fval;
	char *sval;
}

// define the constant-string tokens:
%token SNAZZLE TYPE
%token END
%token OPTION
%token NOT
%token NEG
%token POS

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token <ival> INT
%token <fval> FLOAT
%token <sval> STRING

// left and right operator. TODO
%left '-' '+'
%left '*' '/'
%left NOT NEG POS /* negation--unary minus, unary identity */

%%

// the first rule defined is the highest-level rule, which in our
// case is just the concept of a "chomsky file":
chomsky:
	lines line footer { cout << "done with a snazzle file!" << endl; }
	;
lines:
	SNAZZLE FLOAT { cout << "reading a snazzle file version " << $2 << endl; }
	;
line:
	TYPE STRING { cout << "new defined snazzle type: " << $2 << endl; }
	;
footer:
	END
	;


%%

int main(int argc, const char* const argv[]){
	if (argc==1) {
		char string[] = "sNaZZle 1.3";
    	YY_BUFFER_STATE buffer = yy_scan_string(string);
		yy_switch_to_buffer(buffer);
	
		yyparse();
		yy_delete_buffer(buffer);
	}
	if (argc >= 2){
		// argument passed, look for that filepath
		// open a file handle to a particular file:
		FILE *myfile = fopen(argv[1], "r");
		// make sure it's valid:
		if (!myfile) {
			cout << "I can't open the file" << endl;
			cout << argv[1] << endl;
			return -1;
		}
		// Set flex to read from it instead of defaulting to STDIN:
		yyin = myfile;

		// Parse through the input:
		yyparse();
	}


	//;

}

void yyerror(const char *s) {
	cout << "EEK, parse error!  Message: " << s << endl;
	// might as well halt now:
	exit(-1);
}

